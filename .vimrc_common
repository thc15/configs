" Globals

set nocompatible              " be iMproved
filetype off                  " required!

"set rtp+=~/.vim/bundle/vundle
"let $VIM=$HOME . "/.local/bin/vim"
"let $VIMRUNTIME=$HOME . "/softs/vim/runtime"
"set runtimepath^=$VIMRUNTIME
"set helpfile=$VIMRUNTIME/doc/help.txt

set rtp+=~/softs/fzf
"call vundle#rc()
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" let Vundle manage Vundle
" required!
" Bundle 'gmarik/vundle'

"" original repos on github
"Plug 'vim-scripts/desert-warm-256'
"Plug 'https://github.com/altercation/solarized'
"Plug 'https://github.com/vim-scripts/AfterColors.vim.git'
Plug 'https://github.com/NLKNguyen/papercolor-theme.git'

"" urxvt + tmux
Plug 'https://github.com/christoomey/vim-tmux-navigator.git'
Plug 'https://github.com/benmills/vimux.git'
"Plug 'https://github.com/vim-scripts/perl-support.vim.git'
Plug 'https://github.com/vim-scripts/ctags.vim.git'
"Plug 'https://github.com/craigemery/vim-autotag.git'
Plug 'https://github.com/majutsushi/tagbar.git' " error cant open file
""Plug 'https://github.com/chazy/cscope_maps.git'
Plug 'https://github.com/scrooloose/nerdtree.git'
""Plug 'https://github.com/scrooloose/nerdcommenter.git'
Plug 'https://github.com/vim-scripts/cpp.vim.git'
Plug 'https://github.com/vim-scripts/python.vim.git'
Plug 'https://github.com/tpope/vim-fugitive.git'
Plug 'https://github.com/airblade/vim-gitgutter.git'
"Plug 'https://github.com/jreybert/vimagit.git'
"Plug 'https://github.com/kien/ctrlp.vim.git'
Plug 'junegunn/fzf.vim'
Plug 'jacquesbh/vim-showmarks'
Plug 'https://github.com/AndrewRadev/linediff.vim.git'
Plug 'https://github.com/machakann/vim-highlightedyank.git'
Plug 'https://github.com/tpope/vim-obsession.git'
""" Snippets
"Plug 'SirVer/ultisnips'
"Plug 'honza/vim-snippets'
"Plug 'https://github.com/vim-scripts/BufOnly.vim.git'
""Plug 'https://github.com/vim-scripts/bufferlist.vim.git'
Plug 'mileszs/ack.vim'
Plug 'vim-utils/vim-husk'
""Plug 'https://github.com/vim-scripts/Conque-GDB.git'
""Plug 'https://github.com/Valloric/YouCompleteMe.git'
Plug 'https://github.com/bogado/file-line.git'
Plug 'https://github.com/vim-scripts/DoxygenToolkit.vim.git'
Plug 'https://github.com/vim-scripts/OmniCppComplete.git'
Plug 'https://github.com/ervandew/supertab.git'
Plug 'vim-scripts/Align'
Plug 'https://github.com/vim-scripts/mru.vim.git'
Plug 'itchyny/lightline.vim'
Plug 'https://github.com/mfukar/robotframework-vim.git'
"Plug 'fcpg/vim-osc52'
"Plug 'https://github.com/will133/vim-dirdiff.git'
Plug 'https://github.com/ap/vim-buftabline.git'
Plug 'puremourning/vimspector'

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""
set notitle   " autorename tmux window title
set hlsearch
set incsearch
"set smartcase   " do not use -> * fails to search with class delimiter ::
set ignorecase
set vb t_vb=
set autochdir
set nobackup
set nowritebackup
set noswapfile
" Don't redraw while executing macros (good performance config)
"set lazyredraw
"set noscrollbind
set scrolloff=5
set hidden
set switchbuf=usetab
"set autoindent
set cino+=(0    " indent function args
set noexpandtab
set bs=2
set ts=8
set shiftwidth=0
set number
set list
set listchars=tab:â–¸\ ,trail:.,extends:>
set autoread
set autowrite
set wildmenu
set wildmode=list:longest
set wildmode=list:full
set ruler
set wrap
set cursorline
"set iskeyword-=:
"set columns=330
set colorcolumn=80
"set undofile
set re=1
"set timeoutlen=100
set laststatus=2
set encoding=utf-8
"set updatetime=15000

" Default to not read-only in vimdiff
set noro

set clipboard=unnamed
"set clipboard=unnamedplus

"set paste " Do not set paste option for supertab
" Visual sel to clipboard
set go+=a

" Disable bracketed mode
set t_BE=
set mouse=a

"profile start profile.log
"profile func *
"profile file *
"""""""""""""""""""""MAPPING""""""""""""""""""""""
let g:mapleader = ","
inoremap jk <Esc>
xnoremap <leader>p "_dP

" Copy yank buffer to system clipboard
" Use OSC52 to put things into the system clipboard, works  over SSH!
function! Osc52Yank()
        let buffer=system('base64 -w0', @0)
        let buffer=substitute(buffer, "\n$", "", "")
        let buffer='\e]52;c;'.buffer.'\x07'

        " Need special escaping if within tmux
        if $TMUX != ''
                let buffer='\ePtmux;\e'.buffer.'\e\\'
        endif

        silent exe "!echo -ne ".shellescape(buffer)." > ".shellescape(g:tty)
endfunction

command! Osc52CopyYank call Osc52Yank()

" Copy yank register to system
nnoremap <leader>y :Osc52CopyYank<cr>
" Copy selection to system clipboard
vnoremap <leader>y :<C-u>norm! gvy<cr>:Osc52CopyYank<cr>

" Ignore these directories
set wildignore+=*/tmp/*
set wildignore+=*/build*/**
set wildignore+=*/obj/**
set wildignore+=*/bin/**
set wildignore+=*/stubobj/**
set wildignore+=*/debug*/**
set wildignore+=*/.git/**
set wildignore+=*/linux_x86/**
set wildignore+=*.so,*.swp,*.zip,*.o,*.l,*.y,*.a,*.exe,*.gold,*.out,*.dox

"set path+=$DEV_ROOT/**

autocmd! bufwritepost .vimrc* source %
autocmd BufReadPost,FileReadPost,BufNewFile,BufEnter * call system("tmux rename-window " . expand("%:t"))
" quickwindow
autocmd FileType qf wincmd J

autocmd FocusLost,BufLeave,WinLeave *  silent! :wa!
autocmd BufEnter * stopinsert
"autocmd CursorHoldI * stopinsert
au FocusGained,BufEnter * :checktime

"autocmd FocusLost,BufLeave .* silent! :wa!
"autocmd FocusLost,BufLeave *.[ch] silent! :wa!
"autocmd FocusLost,BufLeave *.[ch]pp silent! :wa!
"autocmd FocusLost,BufLeave *.sv silent! :wa!
"autocmd FocusLost,BufLeave *.log silent! :wa!
"autocmd FocusLost,BufLeave *.txt silent! :wa!
"autocmd FocusLost,BufLeave *.py silent! :wa!
autocmd! * *.log
autocmd! * *.txt
autocmd! * *.gold
autocmd BufEnter * silent! nested :DoShowMarks!
autocmd BufEnter * silent! nested lcd %:p:h  "  break fugitive

autocmd BufRead,BufNewFile *.py,*.pyw,*.sh set shiftwidth=4
autocmd BufRead,BufNewFile *.py,*.pyw,*.sh set expandtab
autocmd BufRead,BufNewFile *.rb set expandtab
autocmd BufRead,BufNewFile *.[ch] set noexpandtab
autocmd BufRead,BufNewFile *.yaml set noexpandtab
autocmd BufRead,BufNewFile *.dtsi set noexpandtab
autocmd BufRead,BufNewFile *.robot,*.resource setf robot
"au InsertEnter * let updaterestore=&updatetime | set updatetime=2000
"au InsertLeave * let &updatetime=updaterestore

augroup Binary
  au!
  au BufReadPre  *.bin,*.elf let &bin=1
  au BufReadPost *.bin,*.elf if &bin | %!xxd
  au BufReadPost *.bin,*.elf set ft=xxd | endif
  au BufWritePre *.bin,*.elf if &bin | %!xxd -r
  au BufWritePre *.bin,*.elf endif
  au BufWritePost *.bin,*.elf if &bin | %!xxd
  au BufWritePost *.bin,*.elf set nomod | endif
augroup END

map <F1> :tn <CR>
noremap <F4> :bp<CR>:bd # <CR>
noremap <C-s-t> :vs<bar>:b#<CR>
noremap <F6> :browse oldfiles!<CR>
vmap <F7> :!xclip -f -sel clip<CR>
map <F8> :-1r !xclip -o -sel clip<CR>

nmap <C-Middlemouse> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
"nmap <c-d> :cs find g <c-r>=expand("<cword>")<cr><cr>

" open header/cpp files
" noremap ,h :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
function! SwitchSourceHeader()
  if (expand ("%:e") == "c")
    let f = system('find ../ -type f -name ' . expand('%:t:r').'.h')
    execute 'edit '.f
  else
    let f = system('find ../ -type f -name ' . expand('%:t:r').'.c')
    execute 'edit '.f
  endif
endfunction

nmap <leader>h :call SwitchSourceHeader()<CR>

autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

vmap cc :s/^/\/\/ /<CR>
vmap cu :s/\v^(\/\/\|#)//<CR>

""""""""""""""""""" DIFF"""""""""""""""""""""""
nnoremap <C-PageDown> ]c
nnoremap <C-PageUp> [c
nnoremap <leader>g :%diffget<CR>

"let g:DiffUnit="Word1"
"let g:DiffColors=323
let g:DiffUpdate=1
let g:DiffModeSync=1
"hi DiffAdd      gui=none    guifg=NONE          guibg=#bada9f
"hi DiffChange   gui=none    guifg=NONE          guibg=#e5d5ac
"hi DiffDelete   gui=bold    guifg=#ff8080       guibg=#ffb0b0

" only for diff mode/vimdiff
if &diff
"  set diffopt+=filler,iwhite,icase,context:2
  set diffopt=filler  ",context:1000000
  set nocursorline
  set columns=200
endif
autocmd FilterWritePre * if &diff | setlocal wrap< | endif

let g:linediff_first_buffer_command  = 'new'
let g:linediff_further_buffer_command = 'vertical new'

"let g:DirDiffExcludes = "CVS,*.class,*.exe,.*.swp,.git,*.o"
"let g:DirDiffForceLang = "en_US"

""""""""""""""""""""" VIMUX"""""""""""""""""""""
nnoremap <C-q> :VimuxPromptCommand<CR>
nnoremap <C-p> :VimuxRunLastCommand<CR>

""""""""""""""""""""" TAB"""""""""""""""""""""
let g:buftabline_indicators=1
let g:buftabline_numbers=0
let g:buftabline_show=2

"let g:BufTabLineCurrent="TabLineSel"  "current window
"let g:BufTabLineActive="TabLine" "other window


""""""""""""""""""""" Ack"""""""""""""""""""""""""
" prefix with s: for local script-only functions / a: prefix for arguments
function! s:search(pattern)
  "echom "Command: " . a:pattern
  :execute 'Ack --cpp '. a:pattern.' $DEV_ROOT'
endfunction

map <F3> :execute "noautocmd vimgrep /" .expand("<cword>") . "/j **/*.[ch]" <Bar> cw<CR>
"map <F3> :execute "noautocmd Ggrep " .expand("<cword>") <Bar> cw<CR><CR>
command! -nargs=1 Search call s:search(<f-args>) | lwindow

""""""""""""""""""""" CtrlP"""""""""""""""""""""""
let g:ctrlp_map = '<C-f>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_by_filename = 1
let g:ctrlp_max_files = 600
let g:ctrlp_max_depth = 20
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
"let g:ctrlp_lazy_update = 50
let g:ctrlp_switch_buffer = 'E'
let g:ctrlp_regexp = 0
let g:ctrlp_mruf_relative = 1
let g:ctrlp_types = ['mru', 'tag', 'fil', 'buf']
let g:ctrlp_extensions = ['mixed', 'tag']

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
  let g:ctrlp_user_command = 'ag %s -i
      \ --nocolor --nogroup --hidden
      \ --ignore .repo
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore test
      \ --ignore golden
      \ --ignore "*tmp*"
      \ --ignore "**/*.pyc"
      \ --ignore "obj"
      \ -g ""'
endif

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)|debug|obj|linux_x86$',
  \ 'file': '\v\.(exe|so|dll|bin|o|v|d|a|gold)$',
  \ }

let g:lightline = {
      \ 'colorscheme': 'PaperColor',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [  'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'separator': { 'left': 'î‚°', 'right': 'î‚²' },
      \ 'subseparator': { 'left': 'î‚±', 'right': 'î‚³' },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \   'readonly': 'LightlineReadonly',
      \   'fugitive': 'LightlineFugitive'
      \ },
    \ }
function! LightlineReadonly()
	return &readonly ? 'î‚¢' : ''
endfunction
function! LightlineFugitive()
	if exists('*FugitiveHead')
		let branch = FugitiveHead()
		return branch !=# '' ? 'î‚ '.branch : ''
	endif
	return ''
endfunction

set fillchars+=stl:\ ,stlnc:\

""""""""""""""""""""" FZF"""""""""""""""""""""""
" - Popup window
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
" - down / up / left / right
let g:fzf_layout = { 'down': '40%' }
let g:fzf_history_dir = '~/.fzf/share/fzf-history'
let g:fzf_preview_window = ['right:50%', 'ctrl-/']
let g:fzf_preview_window = ['up:40%:hidden', 'ctrl-/']

let g:fzf_buffers_jump = 0
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_tags_command = 'ctags -R'
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <Leader>f :Ag<CR>
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>g :GFiles<CR>
nnoremap <silent> <Leader>c :Commits<CR>

"""""""""""""""""" ConqueGDB"""""""""""""""""
"let dev_root="$DEV_ROOT"
"let g:ConqueTerm_Color = 2         " 1: strip color after 200 lines, 2: always with color
"let g:ConqueTerm_CloseOnEnd = 1    " close conque when program ends running
"let g:ConqueTerm_StartMessages = 1 " display warning messages if conqueTerm is configured incorrectly
"
"let g:ConqueGdb_SaveHistory = 1
"let g:ConqueTerm_Color = 0
"let g:ConqueTerm_CloseOnEnd = 1
""let g:ConqueGdb_Leader = ','
"let g:ConqueTerm_ReadUnfocused = 1
"
"command! -nargs=*  Dc :ConqueGdbCommand <args>

""""""""""""""""" Syntastic"""""""""""""""""
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
let g:syntastic_c_checkers=['make','splint']


""""""""""""""""" NerdTree"""""""""""""""""
"nnoremap <C-n> :NERDTree $DEV_ROOT<CR>
"nnoremap <C-h> :NERDTreeToggle $DEV_ROOT<CR>
"let g:NERDTreeChDirMode = 2
"nnoremap <C-> :TagbarToggle <CR>
nnoremap <C-e> :chdir %:p:h <CR> :NERDTreeCWD <CR>
nnoremap <C-d> :NERDTreeToggle <CR>

let g:tagbar_silent = 1

" auto chdir
let g:NERDTreeMouseMode=3
let g:NERDTreeChDirMode=2
let g:NERDTreeWinSize=35
let g:NERDTreeWinPos="left"
let NERDTreeDirArrows = 1
let NERDTreeQuitOnOpen = 3

"""""""""""""""""""" TAGS""""""""""""""""""""""
" recurse up to tags with limit $DEV_ROOT
set tags=./tags;,tags;,.tags;$DEV_ROOT
nnoremap <leader>t :tag <c-r><c-w><cr>
"C-t to go back

"""""""""""""""""""" AUTOTAGS"""""""""""""""""""""
let g:autotagTagsFile=".tags"
let g:autotagStopAt="$DEV_ROOT"

"""""""""""""""""""" TMUX"""""""""""""""""""""
" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 2
let g:tmux_navigator_disable_when_zoomed = 1

let g:tmux_navigator_no_mappings = 1
noremap <silent> <C-Left> :TmuxNavigateLeft<cr>
noremap <silent> <C-Right> :TmuxNavigateRight<cr>
noremap <silent> <C-Down> :TmuxNavigateDown<cr>
noremap <silent> <C-Up> :TmuxNavigateUp<cr>
noremap <silent> <C-BS> :TmuxNavigatePrevious<cr>

noremap <C-h> :bp <CR>
noremap <C-l> :bn <CR>

"""""""""""""""""""" CSCOPE""""""""""""""""""""""
"set cscopequickfix=s-,c-,d-,i-,t-,e-
"
"if has("cscope")
" set csto=1
" "set csverb
" set nocsverb
" set cspc=3
" silent cs add $DEV_ROOT/linux_buildroot/images/k1bio_console_legacy_debug/build/linux-custom/cscope.out
" silent cs add $DEV_ROOT/runtime/ethernet/cscope.out
" silent cs add $DEV_ROOT/libraries/rpc-firmwares/cscope.out
" " set nocst "default use tag shortcuts (C-])
"endif

" snippets
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-tab>"
"let g:UltiSnipsEditSplit="vertical"

"""""""""""""""""" VimSpector""""""""""""""""""""
let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
nmap <leader>dd :call vimspector#Launch()<CR>

"""""""""""""""""" OmniCppCompletion""""""""""""""""""""

" Enable OmniCompletion
" http://vim.wikia.com/wiki/Omni_completion
filetype plugin on
set omnifunc=syntaxcomplete#Complete
au BufNewFile,BufRead,BufEnter *.c,*.h,*.cpp,*.hpp set omnifunc=omni#cpp#complete#Main
" enable global scope search
let OmniCpp_GlobalScopeSearch = 1
" show function parameters
let OmniCpp_ShowPrototypeInAbbr = 1
" show access information in pop-up menu
let OmniCpp_ShowAccess = 1
" auto complete after '.'
let OmniCpp_MayCompleteDot = 1
" auto complete after '->'
let OmniCpp_MayCompleteArrow = 1
" auto complete after '::'
let OmniCpp_MayCompleteScope = 1
" select first item in pop-up menu
let OmniCpp_SelectFirstItem = 0
let OmniCpp_NamespaceSearch = 1
let OmniCpp_DisplayMode         = 1
let OmniCpp_ShowScopeInAbbr     = 0 "do not show namespace in pop-up
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
set completeopt=menuone,menu
set complete-=i "remove include file search
set pumheight=20
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

"""""""""""""""""""" SUPERTAB""""""""""""""""""""""
" SuperTab option for context aware completion
" SuperTab completion fall-back 
"let g:SuperTabDefaultCompletionType='<c-x><c-u><c-p>'
let g:SuperTabLongestHighlight = 1  "preselect first entry
let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabDefaultCompletionType = "<c-n>"
"au BufNewFile,BufRead,BufEnter *.c,*.h,*.cpp,*.hpp let g:SuperTabDefaultCompletionType = "<C-X><C-O>"

"let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']

"let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
"let g:SuperTabContextDiscoverDiscovery = ["&omnifunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"]

""""""""""""""""""""" SPLITS"""""""""""""""""""""""
set splitbelow
set splitright
"noremap sb :sbNext <CR>
nnoremap <F2> <ESC> :vert belowright sbNext<CR> :cclose <CR> :wincmd =<CR>
"nnoremap + :50winc +<CR>
"nnoremap - :30winc -<CR>

autocmd VimResized * exe "normal \<c-w>="

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

""""""""""""""""" DoxyToolkit""""""""""""""""
let g:DoxygenToolkit_compactDoc = "yes"
let g:C_UseTool_doxygen = 'yes'

""""""""""" SESSIONS (save and restore)""""""""""""""""
set sessionoptions=blank,buffers ",folds,help,options,localoptions,winsize,tabpages
set sessionoptions+=unix,slash,tabpages,winsize

noremap ss :mksession! ~/.vim/sessions/
noremap rs :so ~/.vim/sessions/

"""""""""""" ABBREV
iabbrev nlog    netdev_info(netdev, "%s \n", __func__);
iabbrev log    dev_info(dev, "%s \n", __func__);

set enc=utf-8
syntax enable

